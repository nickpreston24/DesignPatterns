<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>MyInvokeMethods</Title>
      <Author>mikenp</Author>
      <Description>
      </Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>
	  MyInvokeMethods
      </Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="true">
          <ID>MyInvokeMethods</ID>
          <ToolTip></ToolTip>
          <Default>
          </Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="csharp" Delimiter="$"><![CDATA[
		/// <summary>
        /// Invoke Method from an Instance (non-null)
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="instance"></param>
        /// <param name="instanceMethodName"></param>
        public static void InvokeMethod<T>(this T instance, string instanceMethodName, object[] parameters)
        {
            try
            {
                Type type = typeof(T);
                MethodInfo toInvoke = type.GetMethod(instanceMethodName);
                Debug.WriteLine(toInvoke.Invoke(instance, parameters));
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.ToString());
            }
        }

        /// <summary>
        /// Invoke Static Method from a given Type
        /// </summary>
        /// <param name="classType"></param>
        /// <param name="staticMethodName"></param>
        /// <param name="parameters"></param>
        public static void InvokeMethod(this Type classType, string staticMethodName, object[] parameters)
        {
            try
            {
                MethodInfo toInvoke = classType.GetMethod(staticMethodName, BindingFlags.Static | BindingFlags.NonPublic);
                toInvoke.Invoke(null, parameters);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.ToString());
            }
        }

        /// <summary>
        /// Invoke Generic Method from a given class Type on a new type 'genericMethodType'
        /// </summary>
        /// <param name="classType"></param>
        /// <param name="genericMethodName"></param>
        /// <param name="genericMethodType"></param>
        public static void InvokeMethod(this Type classType, string genericMethodName, object[] parameters, Type genericMethodType)
        {
            try
            {
                object instance = Activator.CreateInstance(classType);
                MethodInfo openMethod = classType.GetMethod(genericMethodName);
                MethodInfo toInvoke = openMethod.MakeGenericMethod(genericMethodType);
                toInvoke.Invoke(instance, parameters);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.ToString());
            }
        }
		/// <summary>
        /// Negate an Expression
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="expr"></param>
        /// <returns></returns>
        public static Expression<Func<T, bool>> Not<T>(this Expression<Func<T, bool>> expr)
        {
            var candidateExpr = expr.Parameters[0];
            var body = Expression.Not(expr.Body);
            return Expression.Lambda<Func<T, bool>>(body, candidateExpr);
        }
	  ]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>